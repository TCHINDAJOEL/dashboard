# Importation des modules principaux
import calendar  # Module de base de Python pour les calendriers
from datetime import datetime  # Module de base de Python pour travailler avec les dates et heures
import streamlit as st  # Biblioth√®que Streamlit pour la cr√©ation d'applications web interactives
import plotly.graph_objs as go  # Biblioth√®que Plotly pour la cr√©ation de graphiques interactifs
from streamlit_option_menu import option_menu

# -----------------------PARAM√àTRES-----------------------
# Cat√©gories de revenus et de d√©penses
revenus = ["Salaire", "Blog", "Autres Revenus"]
d√©penses = ["Loyer", "Services Publics", "√âpicerie", "Voiture", "Autres D√©penses", "√âpargne"]
# Devise utilis√©e
devise = "EUR"
# Titre de la page
titre_page = "Suivi des Revenus et D√©penses"
# Ic√¥ne de la page
icone_page = "üí∞"  # Vous pouvez utiliser une autre ic√¥ne de la feuille de triche emoji : https://www.webfx.com/tools/emoji-cheat-sheet/
# Configuration de la mise en page
disposition = "centr√©"

# ----------------------------------

# Configuration de la page Streamlit avec le titre, l'ic√¥ne et la mise en page
st.set_page_config(page_title=titre_page, page_icon=icone_page, layout="centered")
# Affichage du titre de la page
st.title(titre_page + " " + icone_page)

# S√©lection des ann√©es et des mois dans une liste d√©roulante pour choisir la p√©riode
ann√©es = [datetime.today().year, datetime.today().year + 1]
mois = list(calendar.month_name[1:])  # Liste des noms des mois (en anglais)

# Menu de navigation avec deux options : "Saisie de Donn√©es" et "Visualisation de Donn√©es"
s√©lectionn√© = option_menu("Menu de Navigation",
                          ["Saisie de Donn√©es", "Visualisation de Donn√©es"],
                          icons=["pencil-fill", "bar-chart-fill"],  # http://icons.getbootstrap.com/
                          orientation="horizontal"
                          )

# Saisie des donn√©es
if s√©lectionn√© == "Saisie de Donn√©es":
    st.header(f"Saisie de Donn√©es en {devise}")
    # Formulaire pour saisir les donn√©es de revenus et de d√©penses
    with st.form("formulaire_saisie", clear_on_submit=True):
        col1, col2 = st.columns(2)
        # S√©lection du mois et de l'ann√©e
        col1.selectbox("S√©lectionnez le Mois:", mois, key="mois")
        col1.selectbox("S√©lectionnez l'Ann√©e:", ann√©es, key="ann√©e")

        "---"
        # Section pour les revenus avec des expanders pour chaque cat√©gorie de revenus
        with st.expander("Revenus"):
            for revenu in revenus:
                st.number_input(f"{revenu}:", min_value=0, format="%i", step=10, key=revenu)
        # Section pour les d√©penses avec des expanders pour chaque cat√©gorie de d√©penses
        with st.expander("D√©penses"):
            for d√©pense in d√©penses:
                st.number_input(f"{d√©pense}:", min_value=0, format="%i", step=10, key=d√©pense)
        # Section pour les commentaires
        with st.expander("Commentaires"):
            commentaire = st.text_area("", placeholder="Saisissez un commentaire ici ...")
        "---"
        # Bouton pour sauvegarder les donn√©es
        soumis = st.form_submit_button("Sauvegarder les Donn√©es")
        if soumis:
            # Construction de la p√©riode (ann√©e_mois)
            p√©riode = str(st.session_state["ann√©e"]) + "_" + str(st.session_state["mois"])
            # Cr√©ation de dictionnaires pour les revenus et les d√©penses √† partir des donn√©es saisies par l'utilisateur
            revenus = {revenu: st.session_state[revenu] for revenu in revenus}
            d√©penses = {d√©pense: st.session_state[d√©pense] for d√©pense in d√©penses}

            # TODO : Ins√©rer les valeurs dans une base de donn√©es
            # Affichage des revenus et des d√©penses sauvegard√©s
            st.write(f"Revenus: {revenus}")
            st.write(f"D√©penses: {d√©penses}")
            st.success("Donn√©es sauvegard√©es !")

# Visualisation des donn√©es
if s√©lectionn√© == "Visualisation de Donn√©es":
    st.header("Visualisation de Donn√©es")
    # Formulaire pour s√©lectionner la p√©riode √† visualiser
    with st.form("Donn√©es Sauvegard√©es"):
        # TODO: R√©cup√©rer les p√©riodes √† partir de la base de donn√©es
        p√©riode = st.selectbox("S√©lectionnez la P√©riode:", ["2024_Mars"])
        soumis = st.form_submit_button("Afficher les Donn√©es")
        if soumis:
            # TODO: Obtenir les donn√©es de la base de donn√©es pour la p√©riode s√©lectionn√©e
            revenus = {'Salaire': 1500, 'Blog': 50, 'Autres Revenus': 10}
            d√©penses = {'Loyer': 600, 'Services Publics': 200, '√âpicerie': 300,
                        'Voiture': 100, 'Autres D√©penses': 50, '√âpargne': 150}

            # Cr√©ation des m√©triques
            total_revenus = sum(revenus.values())
            total_d√©penses = sum(d√©penses.values())
            solde_restant = total_revenus - total_d√©penses
            col1, col2, col3 = st.columns(3)
            col1.metric("Total Revenus", f"{total_revenus} {devise}")
            col2.metric("Total D√©penses", f"{total_d√©penses} {devise}")
            col3.metric("Solde Restant", f"{solde_restant} {devise}")

            # Cr√©ation du diagramme Sankey
            libell√© = list(revenus.keys()) + ["Total Revenus"] + list(d√©penses.keys())
            source = list(range(len(revenus))) + [len(revenus)] * len(d√©penses)
            target = [len(revenus)] * len(revenus) + [libell√©.index(d√©pense) for d√©pense in d√©penses]
            valeur = list(revenus.values()) + list(d√©penses.values())

            # Cr√©ation du dictionnaire de donn√©es pour le diagramme Sankey
            lien = dict(source=source, target=target, value=valeur)
            noeud = dict(label=libell√©, pad=15, thickness=20, color="#E695FF")

            # Cr√©ation du diagramme Sankey
            fig = go.Figure(data=[go.Sankey(
                node=noeud,
                link=lien
            )])

            # Mise en forme du titre du diagramme
            fig.update_layout(title_text="Diagramme Sankey des Revenus et D√©penses", font_size=10)

            # Affichage du diagramme Sankey
            fig.update_layout(margin=dict(l=0, r=0, t=5, b=5))
            st.plotly_chart(fig, use_container_width=True)
